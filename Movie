main.cpp

#include <iostream>
#include <string>
#include <queue>
#include <list>

// Estructura y clase para MovieBST
struct MovieNode {
    std::string title;
    int year;
    std::string genre;
    double rating;
    MovieNode* left;
    MovieNode* right;

    MovieNode(std::string t, int y, std::string g, double r) : title(t), year(y), genre(g), rating(r), left(nullptr), right(nullptr) {}
};

class MovieBST {
public:
    MovieBST() : root(nullptr) {}
    ~MovieBST() {
        destroyTree(root);
    }
    
    void insertMovie(std::string title, int year, std::string genre, double rating) {
        insertMovie(root, title, year, genre, rating);
    }
    
    void printMovies() {
        printMovies(root);
    }

private:
    MovieNode* root;

    void insertMovie(MovieNode*& node, std::string title, int year, std::string genre, double rating) {
        if (node == nullptr) {
            node = new MovieNode(title, year, genre, rating);
        } else if (rating < node->rating) {
            insertMovie(node->left, title, year, genre, rating);
        } else {
            insertMovie(node->right, title, year, genre, rating);
        }
    }

    void printMovies(MovieNode* node) {
        if (node != nullptr) {
            printMovies(node->left);
            std::cout << node->title << " (" << node->year << ") - " << node->genre << " - Rating: " << node->rating << std::endl;
            printMovies(node->right);
        }
    }

    void destroyTree(MovieNode* node) {
        if (node != nullptr) {
            destroyTree(node->left);
            destroyTree(node->right);
            delete node;
        }
    }
};

// Clase para MovieQueue
class MovieQueue {
public:
    void enqueue(const std::string& movie) {
        queue.push(movie);
    }

    void printQueue() {
        std::queue<std::string> temp = queue;
        while (!temp.empty()) {
            std::cout << temp.front() << std::endl;
            temp.pop();
        }
    }

private:
    std::queue<std::string> queue;
};

// Clase para GenreList
class GenreList {
public:
    void addGenre(const std::string& genre) {
        genres.push_back(genre);
    }

    void printGenres() {
        for (const auto& genre : genres) {
            std::cout << genre << std::endl;
        }
    }

private:
    std::list<std::string> genres;
};

// Función principal
int main() {
    MovieBST movieDatabase;
    MovieQueue watchLaterQueue;
    GenreList genreList;

    // Agregar algunas películas y géneros al sistema
    movieDatabase.insertMovie("Inception", 2010, "Sci-Fi", 8.8);
    movieDatabase.insertMovie("The Godfather", 1972, "Crime", 9.2);
    genreList.addGenre("Sci-Fi");
    genreList.addGenre("Crime");

    // Mostrar películas en el sistema
    std::cout << "Películas en el sistema:\n";
    movieDatabase.printMovies();

    // Mostrar géneros
    std::cout << "\nGéneros en el sistema:\n";
    genreList.printGenres();

    // Agregar a la lista de "watch later"
    watchLaterQueue.enqueue("Inception");

    // Mostrar lista de "watch later"
    std::cout << "\nLista de 'watch later':\n";
    watchLaterQueue.printQueue();

    return 0;
}
